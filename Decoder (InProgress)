# Authors: Group 5, Alberto, Joseph, Martin
# MIPS instruction encoding:
#Reads ASSEMBLY code from "MIPS_asm.txt" file

input_file = open("MIPS_asm.txt", "r")
output_file = open("MIPS_machine_code.txt","w")

for line in input_file:
    def foo(x, op, line, n, n2, case):
        line = line.replace(x, "")
        line = line.replace("$","")         # remove $'s anywhere
        line = line.replace("R","")         # remove R's anywhere
        line = line.split(',')              # into three strings
        
        if(case ==1):
            rd = format(int(line[0]), n)    # make rs into 2-bit binary format
            ra = format(int(line[1]), n)    # make rt 2-bit binary format
        # update screen and output file
            print(op + " " + rd + " " + ra + "\n")
        elif(case == 2):

            if(line[1][0] == '-'):              # in case imm is negative...
                line[1] = line[1].replace("-","")        
                line[1] = 0b1111111111111111 - int(line[1]) + 1
                                            # 2's complement conversion
            rd = format(int(line[0]), n)    # make rs into 2-bit binary format
            imm = format(int(line[1]), n2)  # make imm into 3-bit binary format
            print(op + " " + rd + " " + imm + "\n")
        
    if (line == "\n"):              # empty lines ignored
        continue
    
    line = line.replace("\n","")    # remove 'endline' character
    print(line) 
    line = line.replace(" ","")     # remove spaces anywhere in line
    
    
    if(line[0:4] == 'LOAD'):
        x = 'LOAD'
        op = "011"
        num_bits = "02b"
        case =1
        foo(x, op, line, num_bits,0,case)            
        #output_file.write(op + " " + rd + " " + ra + "\n")
       
    elif(line[0:3] == 'STR'):               
        x = 'STR'
        op ="100"
        num_bits = "02b"
        case=1
        foo(x, op, line, num_bits,0,case)
	#output_file.write(op + " " + rd + " " + ra + "\n")
        
    elif(line[0:4] == 'INIT'):		   
        x = 'INIT'
        op ="010"
        num_bits1 = "03b"
        num_bits2 ="01b"
        case=2
        foo(x, op, line, num_bits1, num_bits2,case)

        #output_file.write(op + " " + rd + " " + imm + "\n")

    elif(line[0:4] == "ADDI"):             
        x = 'ADDI'
        op ="00"
        num_bits1 = "02b"
        num_bits2 ="03b"
        case=2
        foo(x, op, line, num_bits1, num_bits2,case)

	#output_file.write(op + " " + rd + " " + imm + "\n")  

    elif(line[0:4] == "COMP"):               
        
        line = line.replace("$","")         # remove $'s anywhere
        line = line.replace("R","")         # remove R's anywhere
        line = line.replace("COMP","")      
        line = line.split(',')              # into three strings
        
        op = "1111"                   
        rd = format(int(line[0]), "03b")    # make rd into 3-bit binary format

	# update screen and output file
        print(op + " " + rd + "\n")     
        output_file.write(op + " " + rd + "\n")


    elif(line[0:3] == "MOV"):               
        x = "MOV"
        op = "1"
        num_bits = "03b"
        case=1
        foo(x, op, line, num_bits,0, case)

	#output_file.write(op + " " + rd + " "+ rs +"\n") 

    elif(line[0:3] == "SLT"):              
        x = "SLT"
        op = "0"
        num_bits = "03b"
        case=1
        foo(x, op, line, num_bits,0, case)
        
	#output_file.write(op + " " + rd + " "+ rs +"\n") 

    elif(line[0:3] == "ADD"):            
        x = "ADD"
        op = "110"
        num_bits = "02b"
        case=1
        foo(x, op, line, num_bits,0,case)
        
	#output_file.write(op + " " + rd + " "+ rs +"\n") 

    elif(line[0:3] == "LSL"):               
        x = 'LSL'
        op ="11"
        num_bits1 = "02b"
        num_bits2 ="03b"
        case=2
        foo(x, op, line, num_bits1, num_bits2,case)
        
	#output_file.write(op + " " + rd + " " + imm + "\n")  

    elif(line[0:2] == "BZ"):
        
        line = line.split('BZ')
        
        if(line[1][1] == '-'):              # in case imm is negative...
                line[1] = line[1].replace("-","")        
                line[1] = 0b1111 - int(line[1]) + 1
                                            # 2's complement conversion 
        op = "101"                                      
        imm = format(int(line[1]), "04b")   # make imm into 5-bit binary format
        
	# update screen and output file
        print(op + " " +imm + "\n")     
        output_file.write(op + " " + imm + "\n")  

    elif(line[0:1] == "B"):
        line = line.split('B')                   

        if(line[1][0] == '-'):               
                line[1] = line[1].replace("-","")        
                line[1] = 0b11111 - int(line[1]) + 1
                                            
        op = "10"                            
        imm = format(int(line[1]), "05b")   # make imm into 5-bit binary format
        
            # update screen and output file
        print(op + " " +imm + "\n")          
	#output_file.write(op + " " + imm + "\n")  

    elif(line[0:1] == "j"):              

        line = line.split('j')                   

        if(line[1][0] == '-'):              # in case imm is negative...  
            line[1] = line[1].replace("-","")        
            line[1] = 0b11111 - int(line[1]) + 1
                                            # 2's complement conversion
        op = "11"                                      
        imm = format(int(line[1]), "05b")   # make imm into 5-bit binary format
        
	# update screen and output file
        print(op + " " +imm + "\n")     
        output_file.write(op + " " + imm + "\n")  

    elif(line[0:3] == "END"):          

        line = line.replace("END","")       
        
        op = "11111111"                     #7-bit
        
	# update screen and output file
        print(op + "\n")     
        output_file.write(op + "\n")

    else:
        print("Unknown instruction:"+line)

input_file.close()
output_file.close()
