# Group 5
# Joseph de Joya
# Martin
# Alberto
# Last Updated: 10/05/2018

# Program 1: Calculate R = 6^P mod Q

# Data Memory
# Addr	|	Content
# 0		|	P
# 1		|	Q
# 2		|	R
...		|	...

# ISA implementation

# Load P and Q
	INIT	$R3, 0		# $R3 = 0
	LOAD	$R0, $R3	# $R0 = MEM[$R3] = MEM[0] = P
	INIT	$R3, 1		# $R3 = 1
	LOAD	$R1, $R3	# $R1 = MEM[$R3] = MEM[1] = Q
	MOV		$R6, $R0	# $R6 = $R0 = P
	MOV		$R7, $R1	# $R7 = $R1 = Q

# Step (1)
	INIT	$R0, 1		# $R0 = c = 1
	INIT	$R1, 0		# $R1 = p' = 0

# Step (2)
	ADDI	$R1, 1		# p' <- p' + 1

# Step (3): c = 6c mod Q = (4 + 2)c mod Q = (4c + 2c) mod Q
	MOV		$R2, $R0	# $R2 = $R0 = c
	LSL		$R2, 2		# $R2 = 4c
	LSL		$R0, 1		# $R0 = 2c
	ADD		$R0, $R2	# $R0 = c <- 4c + 2c = 6c
	MOV		$R3, $R7	# $R3 = $R7 = Q
	COMP	$R3			# $R3 = -Q
	j		2			# Move 2 instructions forward, PC = PC + 2

	ADD		$R0, $R3	# c <- c - Q
	
	SLT		$R0, $R7	# If c < Q then $branch = 1, else $branch = 0
	BZ		-2			# If $branch = 0 then go back 2 instructions (PC = PC - 2), else continue

# Step (4)
	SLT		$R1, $R6	# If p' < P then $branch = 1, else $branch = 0
	B		-12			# If $branch = 1 then go back 12 instructions (PC = PC- 12), else continue

# At this Point R = $R0 = c = 6^P mod Q, hence store R in designated data memort address
	INIT	$R3, 1		# $R3 = 1
	LSL		$R3, 1		# $R3 = 1 << 1 = 1 * 2 = 2
	STR		$R0, $R3	# MEM[$R3] = MEM[2] = R = $R0 = c
