# Group 5
# Joseph de  Joya
# Martin Cardona
# Alberto Espinoza
# Last Updated: 10/08/2018

# Program 2: Best Match Count

# Data Memory
# Addr	|	Content
# 0		|	
# ...	|	...
# 3		|	T
# 4		|	S = best match score
# 5		|	C = best match count
# ...	|	...
# 7		|	n = Number of elements in Pattern_Array
# 8		|	Pattern_Array[1]
# 9		|	Pattern_Array[2]
# ...	|	...
# 107	|	Pattern_Array[100]

      # Notes: Let $SR2 track the best matching score
	# Notes: Let $SR3 track the best matching count

      # Setting up
      10010101    # $R1 = 0 + 1 = 1
      10010101    # $R1 = 1 + 1 = 2
      10010101    # $R1 = 2 + 1 = 3
      11010001    # $R0 = MEM[$R1] = MEM[3] = T
      
      11100001    # $R1 = 3 * 2 = 6
      10010101    # $R1 = 6 + 1 = 7
      11010011    # $R1 = MEM[$R1] = MEM[7] = n
      
      01111000    # $SR0 = $R0 = T
      11111001    # $SR1 = $R1 = n
      10011001    # $R2 = 7 + 1 = 8, addr of the first element in Pattern_Array
      00110101    # go to start_match
      
 # loop_match
      01110001    # $R1 = $SR1 = n
      00010111    # $R1 = n' = n - 1
      11111001    # $SR1 = $R1 = n
      10011001    # $R2 = addr of the next element in Pattern_Array

# start_match
      # Check if all elements in Pattern_Array have been checked.
	# Note: $R2 will contain an addr for an element in Pattern_Array (must not be changed).
	# After this block, $R0, $R1, $R3 can be reused.
      01110100    # $R0 = 0
      00100001    # If 0 < n then $branch = 1, else $branch = 0
      01000100    # PC = PC + 4, go forward 4 instructions
      00110010    # jump to done

     #INTERMEDIATE JUMP
      10111000	  #go to loop_match
      00110111	  #jump to done
	
      # Check for matched bits.
      10000010    # $R0 = $R2 = addr of an element in Pattern_Array
      11010010    # $R1 = Pattern_Array[$R0]
      11110000    # $R0 = $SR0 = T
      01100101    # $R0 = $R0 bitwise not xor (equivalence) $R1
      
      # INTERMEDIATE JUMP
      10110011    # PC = PC + 3, jump three instructions forward
      00111001    # go to loop_match
      00110101	  #jump to done
		  
      # INTERMEDIATE JUMP
      
      01110111    # $R3 = counter = 0
      11110101    # $R1 = 0
      00111011    # go to start_count
      		  
# loop_count
      00011101    # $R3 = counter = $R3 + 1
      
# loop_no_count
      01100000    # $R0 = $R0 << 1
      
      # INTERMEDIATE JUMP
      10110100    # PC = PC + 4, jump 4 instructions forward
      10110111	  # jump to done
      00111001	  # go to loop_match
      00110110	  # go to start_count
      11000101	  # PC = PC + 5, jump 5 instructions forward
      11001001	  # go to loop_count
      11001001	  # go to loop_no_count
      10111011	  #go to loop_match
      10110111	  # jump to done

# start_count
      # Check if counting is done.
      11101000    # If $R0 == 0 then $branch = 1, else $branch = 0
      11000110    # go to count_done
      
      # Note: $R3 = matched bit counter, $R1 = 0
      # Check wether there is matched bit or not.
      00100001    # If $R0 < 0 then $branch = 1, else $branch =  0
      11001001    #B loop_count
      00111001    #J loop_no_count
      
# count_done
      # Notes: $R3 = number of matched bits for Pattern_Array[$R2]
	# $R0 and $R1 can be reused at this point.
	# $SR0 = Target pattern T
	# $SR1 = number of elements left in Pattern_Array that needs to be checked.
	# $SR2 = tracker for best match score
	# $SR3 = tracker for best match count
      01110100    # $R0 = 0
      11110101    # $R1 = 0
      10000010    # $R0  = $R2 <- temporarily store the addr an element in the Pattern_Array
      10000111    # $R1 = $R3 <- move matched bit count

      # INTERMEDIATE JUMP
      10110011    # PC = PC + 3, jump two instructions forward
      00111001 	  # go to loop_match
      10110111	  # go to done
		  
      # INTERMEDIATE JUMP

      01110010    # $R2 = current best match score
      10101001    # If $R2 < $R1 then $branch = 1, else $branch = 0
      11000011    #B update_best_match

      # INTERMEDIATE JUMP
      10110010    # PC = PC + 4, jump two instructions forward
      00111010	  # go to loop_match
      00110110	  # go to update_best_match
      00110110	  # go to done
		  
      # INTERMEDIATE JUMP

      # Check if current pattern is a best match, if it is then update best_match_score
      11101110    # $R2 = -$R2
      00000110    # $R1 = $R1 - $R2

      # INTERMEDIATE JUMP
      10110100    # PC = PC + 4, jump two instructions forward
      00111010	  # go to loop_match
      00110101	  # go to update_best_match
      00110101	  # go to done
		  
      # INTERMEDIATE JUMP
      01101001	  #If $R1 == 0 then $branch = 1, else $branch = 0
      01000101	  # go to update_best_match_count
		  
      #INTERMEDIATE JUMP
      10110111	  # PC = PC +7, jump 7 instructions forward
      10110101	  # go to update_best_match
      00110011	  # go to done
      10111000	  # go to loop_match
      00110110	  # go to update_best_match_count
      10110111	  # go to done
      10110111	  # go to update_best_match

# prep_loop
	# Note: Set $R2 to hold the addr of an element in Pattern_Array
	# This addr is temporarily held by $R0
      11110110    # $R2 = 0
      10001000    # $R2 = addr of an element in the Pattern_Array
      00111010    #J loop_match

      # INTERMEDIATE JUMP
      00110111    # go to update_best_match_count
      00111100	  # go to prep_loop
      00111011	  # go to done
      
# update_best_match
      # Note: $R2 and $R3 can be reused.
      11110110    # $R2 = 0
      00001001    # $R2 = 0 + $R1 = $R1
      11111010    # $SR2 = $R2, best_match_score updated

      # INTERMEDIATE JUMP
      10110100    # PC = PC + 4, jump two instructions forward
      10110101 	  # go to update_best_match_count
      00111001	  # go to prep_loop
      10110111	  # go to done
		 
      # INTERMEDIATE JUMP
      
      01110111    # $R3 = 0
      01111011    # $SR3 = $R3 = 0, reset best_match_score

# update_best_match_count
      11110011    # $R3 = $SR3 = best_match_count
      00011101    # $R3 = $R3 + 1
      01111011    # $SR3 = $R3, best_match_count updated
      00111001    # PC = PC - 7, go to prep_loop

# done
	# Note: Store the best_match_score and best_match_count to the appropriate
	# data memory address
	# R0 and $R1 can be reused at this point.
      01110010    # $R2 = $SR2 = best_match_score
      11110011    # $R3 = $SR3 = best_match_count
      01110100    # $R0 = 0
      00010001    # $R0 = 0 + 1 = 1
      01100000    # $R0 = 1 * 2 = 2
      01100000    # $R0 = 2 * 2 = 4
      01011100    # MEM[$R0] = MEM[4] = S = $R2 = best matching score
      00010001    # $R0 = 4 + 1 = 5
      11011110    # MEM[$R0] = MEM[5] = C = $R3 = best matching count
      11111111    #END


