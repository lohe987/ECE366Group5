# Program 1: Calculate R = 6^P mod Q
# Approach: Using a property of modular arithmetic (a*b) mod q = ((a mod q) * (b mod q)) mod q
# I will use the algorithm below to get the result c = b^p mod q. Where c is the result, b is
# the base, p is the exponent, and  q is the modular divisor.
# (1) set c = 1 and p' = 0
# (2) p' = p' + 1
# (3) c = (b * c) mod q
# (4) If p' < p go back to step (2), else c is the solution.

# Data Memory
# Addr  | Content
# 0     | P
# 1     | Q
# 2     | R
# ...   | ...

#load P and Q
00010001   #$R0 = 1
01010110   #$R3 = MEM[$R0] = MEM[1] = Q
11111010   #$SR2 = $R2, Stash P to a special register

#step 1;  Note $R0 = 1, let $r0 = c = 1
#R1 = 0, let $R1 = p' =0

#step 2
10010101   #p' <- p'+ 1

#step 3: c = 6c mod Q = (4+2)c mod Q = (4c + 2c) mod Q
11110110   #$R2 = 0, Resets previous value
01100000   #R0 = c*2= 2c
10001000   #R2 = 0 + 2c = 2c
01100000   #$R0 = 2c* 2 = 4c
10001000   #R2 = 4c + 2c = 6c

#intermediate jumps(allows us to access step 2 by going through memory)
10110010   #PC = PC + 2, go down 2 instructions 
10011010   #Go back to step 2

#intermediate jumps
01110100   #$R0 = 0
10000010   #$R0 = $R2  = 6c
11110110   #$R2 = 0
10001011   #Note: $R3 is still Q, thus $R2 = 0  + $R3 = 0 + Q = Q
11101110   #$R2 = -Q
00110011   #PC = PC + 3, go to mod_loop

#intermediate jumps(allows us to access step 2 by going through memory)
10011001   #Go back to step 2

#cond_update(checks current integer)
10000010   #c <- c - Q

#mod_loop 
10100011   #If c < Q then $branch = 1, else $branch = 0
11000011   #If $branch =  1, move to step 4, else continue
10111101   #Move back 3 instructions, (cond_update)

#intermediate jumps
10111011   #Go back to step 2

#step 4 Note: At this point c < -c mod Q
01110010  #$R2 = $SR2 = P   Note:$SR2 is a special register
10100110  #If p' < P then $branch = 1, else $branch = 0
01001101  #Go back to step 2

#At this point R = $R0 = c = 6^P mod Q, hence store R in designated data memory address
11110101  #$R1 = 0
10010110  #R1 = -2
11101101  #$R1 = 2
01011001  #MEM[$R1] = MEM[2] + R = $R0 =c
11111111  #Ends program
