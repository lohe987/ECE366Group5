# Authors: Group 5, Alberto, Joseph, Martin
#Reads ASSEMBLY code from "MIPS_asm.txt" file

input_file = open("MIPS_asm.txt", "r")

for line in input_file:
    def adder(a, b, ones, op, rd, ra):
        chars = "1"
        for char in chars:
            count = a.count(char)
            ones = ones + count
            count = b.count(char)
            ones = ones + count    
            if ones %2 == 0:
                print("0" + op + rd + ra + "\n") # update screen
            else:
                print("1" + op + rd + ra + "\n")# update screen 
        
    def adder2(a, ones, op ,rd):
        chars = "1"
        for char in chars:
            count = a.count(char)
            ones = ones + count
            if ones %2 == 0:
                print("0" +op + rd + "\n")
            else:
                print("1" +op + rd + "\n")
           
    def foo(x, op, line, n, n2, sub, case):
       
        line = line.replace(x, "")
        line = line.replace("$","")         # remove $'s anywhere
        line = line.replace("R","")         # remove R's anywhere
        line = line.split(',')              # into three strings
        
        if(case ==1):
            rd = format(int(line[0]), n)    # make rd into n-bit binary format
            if(sub==0):
                ra = format(int(line[1]), n2)    # make ra 2-bit binary format
                adder(rd,ra, ones, op, rd, ra)
             
            if(sub==1):
                adder2(rd, ones, op, rd)
                
        elif(case == 2):
            if(line[1][0] == '-'):          # 2's complement conversion for negatives
                line[1] = line[1].replace("-","")        
                line[1] = 0b1111111111111111 - int(line[1]) + 1
                                                                          
            rd = format(int(line[0]), n)    # make rd into n-bit binary format
            imm = format(int(line[1]), n2)  # make imm into n2-bit binary format
            adder(rd,imm, ones, op, rd, imm)
                
    def foo2(op, n, case, line):
        if(case==1):
            line = line.split('B')
            if(line[1][0] == '-'):               
                line[1] = line[1].replace("-","")
                line[1] = 0b1111 - int(line[1]) + 1
        elif(case==2):
            line = line.split('J')
            if(line[1][0] == '-'):               
                line[1] = line[1].replace("-","")
                line[1] = 0b1111 - int(line[1]) + 1

        imm = format(int(line[1]), n)   # make imm into 5-bit binary format
        adder2(imm,ones, op ,imm)
    
    if (line == "\n"):              # empty lines ignored
        continue
    
    line = line.replace("\n","")    # remove 'endline' character
    print(line) 
    line = line.replace(" ","")     # remove spaces anywhere in line
    ones = 0                        #counts all 1's in machineCode
       
    if(line[0:4] == "LOAD"):
        ones = ones + 2
        foo('LOAD', "1010", line, "02b","01b", 0,1)

    elif(line[0:3] == "STR"):
        ones = ones + 3
        foo('STR', "1011", line, "02b","01b",0,1) 
	
    elif(line[0:4] == "COMP"):
        ones = ones + 4
        foo('COMP', "11011", line, "02b",0, 1,1)
        
    elif(line[0:4] == "ADDI"):
        ones = ones + 1
        foo('ADDI', "001", line, "02b", "02b",0, 2)

    elif(line[0:3] == "ADD"):
        foo("ADD", "000", line, "02b","02b", 0,1)

    elif(line[0:3] == "SLT"):              
        ones = ones + 1
        foo("SLT", "010", line, "02b","02b",0, 1)
        
    elif(line[0:3] == "LSL"):               
        ones = ones + 2
        foo('LSL', "11000", line, "02b", 0, 1,1)
        
    elif(line[0:3] == "EQZ"):
        ones = ones + 3
        foo("EQZ","11010", line, "02b",0,1,1)

    elif(line[0:1] == "B"):
        ones = ones + 1
        foo2("100", "04b", 1, line)
        
    elif(line[0:1] == "J"):
        ones = ones + 2
        foo2("011", "04b", 2, line)

    elif(line[0:3] == "XOR"):
        ones = ones + 4
        foo('XOR', "11011",line, "01b", "01b", 0, 1)

    elif(line[0:4] == "STSH"):
        ones = ones + 4
        foo('STSH', "11110",line, "02b", 0, 1, 1)

    elif(line[0:3] == "RCV"):
        ones = ones + 3
        foo('RCV', op,line, "02b", 0, 1, 1)

    elif(line[0:3] == "RST"):
        ones = ones + 4
        foo('RST', "11101",line, "02b", 0, 1, 1)

    elif(line[0:3] == "END"):          
        line = line.replace("END","")       
        op = "11111111"                     
        print(op + "\n")     
        output_file.write(op + "\n")

    else:
        print("Unknown instruction:"+line)

input_file.close()
