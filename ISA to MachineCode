#Authors: Group 5, Alberto, Joseph, Martin
#MIPS instruction encoding:
#Reads ASSEMBLY code from "MIPS_asm.txt" file

input_file = open("MIPS_asm.txt", "r")
output_file = open("MIPS_machine_code.txt","w")

for line in input_file:
    def adder(a, b, c):
        ones =0
        chars = "1"
        for char in chars:
            count = a.count(char)
            ones = ones + count
            count = b.count(char)
            ones = ones + count
            #count = c.count(char)
            print (ones)
    def foo(x, op, line, n, n2, case):
       
        line = line.replace(x, "")
        line = line.replace("$","")         # remove $'s anywhere
        line = line.replace("R","")         # remove R's anywhere
        line = line.split(',')              # into three strings
        
        if(case ==1):
            rd = format(int(line[0]), n)    # make rd into 2-bit binary format
            if(n2==0):
                ra = format(int(line[1]), n)    # make ra 2-bit binary format
                print(op + rd + ra + "\n") # update screen and output file
                output_file.write(op + rd+ ra + "\n")
                adder(rd,ra, 0)
            if(n2==1):
                print(op + rd + "\n") # update screen and output file
                adder(0,imm, 0)
             
        elif(case == 2):
            if(line[1][0] == '-'):          # 2's complement conversion for negatives
                line[1] = line[1].replace("-","")        
                line[1] = 0b1111111111111111 - int(line[1]) + 1
                                                                          
            rd = format(int(line[0]), n)    # make rd into n-bit binary format
            imm = format(int(line[1]), n2)  # make imm into n2-bit binary format
            print(op + rd + imm + "\n")
            output_file.write(op + rd + imm + "\n")
            adder(rd,imm, 0)

                
    def foo2(op, n, case, line):
        if(case==1):
            line = line.split('B')
            if(line[1][0] == '-'):               
                line[1] = line[1].replace("-","")
                line[1] = 0b11111 - int(line[1]) + 1
        elif(case==2):
            line = line.split('BZ')
            if(line[1][0] == '-'):               
                line[1] = line[1].replace("-","")
                line[1] = 0b1111 - int(line[1]) + 1
        elif(case==3):
            line = line.split('j')
            if(line[1][0] == '-'):               
                line[1] = line[1].replace("-","")
                line[1] = 0b11111 - int(line[1]) + 1   

        imm = format(int(line[1]), n)   # make imm into 5-bit binary format
        print(op +imm + "\n")     
        output_file.write(op + imm + "\n")
        adder(0,imm, 0)
          
    if (line == "\n"):              # empty lines ignored
        continue
    
    line = line.replace("\n","")    # remove 'endline' character
    print(line) 
    line = line.replace(" ","")     # remove spaces anywhere in line
       
    if(line[0:4] == 'LOAD'):
        x = 'LOAD'
        op = "011"
        num_bits = "02b"
        case =1
        foo(x, op, line, num_bits,0,case)            
        
    elif(line[0:3] == 'STR'):               
        x = 'STR'
        op ="100"
        num_bits = "02b"
        case=1
        foo(x, op, line, num_bits,0,case)
	
    elif(line[0:4] == 'INIT'):		   
        x = 'INIT'
        op ="010"
        num_bits1 = "03b"
        num_bits2 ="01b"
        case=2
        foo(x, op, line, num_bits1, num_bits2,case)
        
    elif(line[0:4] == "ADDI"):             
        x = 'ADDI'
        op ="00"
        num_bits1 = "02b"
        num_bits2 ="03b"
        case=2
        foo(x, op, line, num_bits1, num_bits2,case)

    elif(line[0:4] == "COMP"):               
        x = 'COMP'
        op ="1111"
        num_bits1 = "03b"
        case=1
        foo(x, op, line, num_bits1,1,case)

    elif(line[0:3] == "MOV"):               
        x = "MOV"
        op = "1"
        num_bits = "03b"
        case=1
        foo(x, op, line, num_bits,0, case)

    elif(line[0:3] == "SLT"):              
        x = "SLT"
        op = "0"
        num_bits = "03b"
        case=1
        foo(x, op, line, num_bits,0, case)
        
    elif(line[0:3] == "ADD"):            
        x = "ADD"
        op = "110"
        num_bits = "02b"
        case=1
        foo(x, op, line, num_bits,0,case)
        
    elif(line[0:3] == "LSL"):               
        x = 'LSL'
        op ="11"
        num_bits1 = "02b"
        num_bits2 ="03b"
        case=2
        foo(x, op, line, num_bits1, num_bits2,case)
        
    elif(line[0:2] == "BZ"):
        op ="101"
        n ="04b"
        case=2
        foo2(op, n, case, line)

    elif(line[0:1] == "B"):
        op ="10"
        n ="05b"
        case=1
        foo2(op, n, case, line)

    elif(line[0:1] == "j"):
        op ="11"
        n ="05b"
        case=3
        foo2(op, n, case, line) 

    elif(line[0:3] == "END"):          
        line = line.replace("END","")       
        op = "11111111"                     
        print(op + "\n")     
        output_file.write(op + "\n")

    else:
        print("Unknown instruction:"+line)

input_file.close()
output_file.close()
